name: Compile OpenSSL For Android

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  OPENSSL_VERSION: 3.5.2
  WORK_PATH: /home/runner/work/SSL-Android-16kb-alignment/SSL-Android-16kb-alignment

jobs:
  Compile_OpenSSL_for_Android:
    name: Compile OpenSSL
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        info:
          - '{ "ANDROID_TARGET_ABI": "armeabi-v7a", "ANDROID_TARGET_API": "29",  "ANDROID_NDK": "r28c"}'
          - '{ "ANDROID_TARGET_ABI": "arm64-v8a", "ANDROID_TARGET_API": "29",  "ANDROID_NDK": "r28c"}'
          - '{ "ANDROID_TARGET_ABI": "riscv64", "ANDROID_TARGET_API": "29",  "ANDROID_NDK": "r28c"}'
          - '{ "ANDROID_TARGET_ABI": "x86", "ANDROID_TARGET_API": "29",  "ANDROID_NDK": "r28c"}'
          - '{ "ANDROID_TARGET_ABI": "x86_64", "ANDROID_TARGET_API": "29",  "ANDROID_NDK": "r28c"}'
    
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Install tools check aligment
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils

      - name: Install Aria2
        run: |
          sudo apt -yqq update
          sudo apt install -yqq aria2

      - name: Download Android NDK
        id: download_ndk
        run: |
          aria2c -o android-ndk-${{fromJSON(matrix.info).ANDROID_NDK}}.zip https://dl.google.com/android/repository/android-ndk-${{fromJSON(matrix.info).ANDROID_NDK}}-linux.zip
          unzip android-ndk-${{fromJSON(matrix.info).ANDROID_NDK}}.zip
          echo "::set-output name=status::success"

      - name: Download OpenSSL
        id: download_openssl
        run: |
          aria2c -o openssl-${{env.OPENSSL_VERSION}}.tar.gz https://github.com/openssl/openssl/releases/download/openssl-${{env.OPENSSL_VERSION}}/openssl-${{env.OPENSSL_VERSION}}.tar.gz
          tar -zxvf openssl-${{env.OPENSSL_VERSION}}.tar.gz
          echo "::set-output name=status::success"

      - name: Compile
        id: compile
        if: steps.download_ndk.outputs.status == 'success' && steps.download_openssl.outputs.status == 'success' && !cancelled()
        run: |
          bash ./android_openssl.sh ${{fromJSON(matrix.info).ANDROID_TARGET_API}} ${{fromJSON(matrix.info).ANDROID_TARGET_ABI}} ${{env.OPENSSL_VERSION}} ${{fromJSON(matrix.info).ANDROID_NDK}}
          echo "::set-output name=status::success"

      - name: Check .so alignment
        continue-on-error: true
        run: |
          LIB_PATH="  ${{env.WORK_PATH}}/openssl_${{env.OPENSSL_VERSION}}_${{fromJSON(matrix.info).ANDROID_TARGET_ABI}}/lib"
          for lib in ${LIB_PATH}/*.so; do
            echo "Checking alignment for: ${lib}"
            res=$(objdump -p "${lib}" | grep LOAD | awk '{ print $NF }' | head -1)
          
            if [[ $res =~ 2\*\*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,}) ]]; then
              echo -e "${lib}: ${GREEN}ALIGNED${ENDCOLOR} ($res)"
            else
              echo -e "${lib}: ${RED}UNALIGNED${ENDCOLOR} ($res)"
            fi
          done

      - name: Generate release tag
        id: tag
        run: |
          tar -zcvf OpenSSL_${{env.OPENSSL_VERSION}}_${{fromJSON(matrix.info).ANDROID_TARGET_ABI}}.tar.gz openssl_${{env.OPENSSL_VERSION}}_${{fromJSON(matrix.info).ANDROID_TARGET_ABI}}
          echo "::set-output name=release_tag::${{env.OPENSSL_VERSION}}"
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        if: steps.tag.outputs.status == 'success' && !cancelled()
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.APP_TOKEN}}
        with:
          tag_name: ${{steps.tag.outputs.release_tag}}
          files: ${{env.WORK_PATH}}/OpenSSL_${{env.OPENSSL_VERSION}}_${{fromJSON(matrix.info).ANDROID_TARGET_ABI}}.tar.gz

  Delete_Workflow:
    needs: [ Compile_OpenSSL_for_Android ]
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 8
